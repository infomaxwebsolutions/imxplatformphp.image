<?php
/**
 * @namespace
 */
namespace de\imxnet\imxplatformphp\image\editor\croppingStrategy;

use \de\imxnet\imxplatformphp\image\Box;
use \de\imxnet\imxplatformphp\image\Dimensions;
use \de\imxnet\imxplatformphp\image\Point;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-05-21 at 16:16:42.
 */
class AlignOnFcoalPointTest extends \de\codenamephp\platform\test\TestCase {

  /**
   * @var \de\imxnet\imxplatformphp\image\editor\croppingStrategy\AlignOnFcoalPoint
   */
  private $sut = null;

  protected function setUp() {
    $this->sut = new \de\imxnet\imxplatformphp\image\editor\croppingStrategy\AlignOnFcoalPoint();
  }

  public function testsetupBox_canUseGivenBox() {
    $box = new Box();

    self::assertSame($box, $this->sut->setupBox(new Dimensions(), $box));
  }

  public function testsetupBox_canCreateNewBox_ifNoBoxIsGiven() {
    $desiredDimensions = new Dimensions(100, 200);
    $expectedBox = (new Box())->setDimensions($desiredDimensions);

    $box = $this->sut->setupBox($desiredDimensions);

    self::assertEquals($expectedBox, $box);
    self::assertNotSame($desiredDimensions, $box->getDimensions());
  }

  public function testconstraintDimensions_canKeepDimensions_ifBoxDimensionsFitIntoOriginalDimensions() {
    $box = new Box();
    $box->getDimensions()->setWidth(500)->setHeight(250);

    $this->sut->constraintDimensions($box, new Dimensions(1000, 1000));

    self::assertEquals(new Dimensions(500, 250), $box->getDimensions());
  }

  public function testconstraintDimensions_canShrinkDimensions_whenWidthIsBiggerThanOriginalDimensions() {
    $box = new Box();
    $box->getDimensions()->setWidth(500)->setHeight(250);

    $this->sut->constraintDimensions($box, new Dimensions(300, 300));

    self::assertEquals(new Dimensions(300, 150), $box->getDimensions());
  }

  public function testconstraintDimensions_canShrinkDimensions_whenHeightIsBiggerThanOriginalDimensions() {
    $box = new Box();
    $box->getDimensions()->setWidth(250)->setHeight(500);

    $this->sut->constraintDimensions($box, new Dimensions(300, 300));

    self::assertEquals(new Dimensions(150, 300), $box->getDimensions());
  }

  public function testconstraintDimensions_canShrinkDimensions_whenHeightAndWidthAreBiggerThanOriginalDimensions() {
    $box = new Box();
    $box->getDimensions()->setWidth(1000)->setHeight(2000);

    $this->sut->constraintDimensions($box, new Dimensions(300, 300));

    self::assertEquals(new Dimensions(150, 300), $box->getDimensions());
  }

  public function testcenterOnFocalPoint_canSetTopLeftCorner_whenPointStaysWithinBounds() {
    $box = new Box();
    $box->getDimensions()->setWidth(100)->setHeight(200);
    $box->getTopLeftCorner()->setX(200)->setY(300);

    $this->sut->centerOnFocalPoint($box, new Point(500, 500));

    self::assertEquals(new Point(450, 400), $box->getTopLeftCorner());
  }

  public function testcenterOnFocalPoint_canSetTopLeftCornerToZeroZero_whenPointWouldMoveOutOfBounds() {
    $box = new Box();
    $box->getDimensions()->setWidth(1000)->setHeight(2000);
    $box->getTopLeftCorner()->setX(200)->setY(300);

    $this->sut->centerOnFocalPoint($box, new Point(500, 500));

    self::assertEquals(new Point(0, 0), $box->getTopLeftCorner());
  }

  public function testmoveIntoBounds_canMoveX_ToCoordinates_ifRightSideIsOutOfBounds() {
    $box = new Box();
    $box->getDimensions()->setWidth(300)->setHeight(300);
    $box->getTopLeftCorner()->setX(300)->setY(300);

    $this->sut->moveIntoBounds($box, new Dimensions(500, 1000));

    self::assertEquals(200, $box->getTopLeftCorner()->getX());
  }

  public function testmoveIntoBounds_canMoveY_ToCoordinates_ifBottomSideIsOutOfBounds() {
    $box = new Box();
    $box->getDimensions()->setWidth(300)->setHeight(300);
    $box->getTopLeftCorner()->setX(300)->setY(300);

    $this->sut->moveIntoBounds($box, new Dimensions(1000, 500));

    self::assertEquals(200, $box->getTopLeftCorner()->getY());
  }

  public function testmoveIntoBounds_canMoveX_ToZero_ifRightSideIsOutOfBounds_andWidthIsBiggerThanOriginalWidth() {
    $box = new Box();
    $box->getDimensions()->setWidth(500)->setHeight(500);
    $box->getTopLeftCorner()->setX(300)->setY(300);

    $this->sut->moveIntoBounds($box, new Dimensions(300, 1000));

    self::assertEquals(0, $box->getTopLeftCorner()->getX());
  }

  public function testmoveIntoBounds_canMoveY_ToZero_ifBottomSideIsOutOfBounds_andHeightIsBiggerThanOriginalHeight() {
    $box = new Box();
    $box->getDimensions()->setWidth(500)->setHeight(500);
    $box->getTopLeftCorner()->setX(300)->setY(300);

    $this->sut->moveIntoBounds($box, new Dimensions(1000, 300));

    self::assertEquals(0, $box->getTopLeftCorner()->getY());
  }

  public function testgetBox_canCenterOnFocalPoint_whenBoxFitsWithoutGettingOutOfBounds() {
    $box = $this->sut->getBox(new Dimensions(400, 200), new Dimensions(800, 600), new Point(300, 300));

    $expectedBox = new Box();
    $expectedBox->getDimensions()->setWidth(400)->setHeight(200);
    $expectedBox->getTopLeftCorner()->setX(100)->setY(200);

    self::assertEquals($expectedBox, $box);
  }

  public function testgetBox_canShrinkAndAlignLeft_whenBoxIsGettingOutOfBounds() {
    $box = $this->sut->getBox(new Dimensions(400, 200), new Dimensions(200, 150), new Point(100, 100));

    $expectedBox = new Box();
    $expectedBox->getDimensions()->setWidth(200)->setHeight(100);
    $expectedBox->getTopLeftCorner()->setX(0)->setY(50);

    self::assertEquals($expectedBox, $box);
  }

  public function testgetBox_canShrinkAndAlignTopLeft_whenBoxIsGettingOutOfBounds() {
    $box = $this->sut->getBox(new Dimensions(400, 300), new Dimensions(200, 150), new Point(100, 100));

    $expectedBox = new Box();
    $expectedBox->getDimensions()->setWidth(200)->setHeight(150);
    $expectedBox->getTopLeftCorner()->setX(0)->setY(0);

    self::assertEquals($expectedBox, $box);
  }
}
