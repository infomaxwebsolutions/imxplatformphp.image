<?php
/**
 * @namespace
 */
namespace de\imxnet\imxplatformphp\image\editor\croppingStrategy;

use \de\imxnet\imxplatformphp\image\Box;
use \de\imxnet\imxplatformphp\image\Dimensions;
use \de\imxnet\imxplatformphp\image\Point;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-05-21 at 21:34:22.
 */
class ZoomOnFocalPointTest extends \de\codenamephp\platform\test\TestCase {

  /**
   * @var \de\imxnet\imxplatformphp\image\editor\croppingStrategy\ZoomOnFocalPoint
   */
  private $sut = null;

  protected function setUp() {
    $this->sut = new \de\imxnet\imxplatformphp\image\editor\croppingStrategy\ZoomOnFocalPoint();
  }

  public function testgetBox() {
    self::assertEquals($this->createBox(0, 100, 1000, 600), $this->sut->getBox(new Dimensions(500, 300), new Dimensions(1000, 700), new Point(300, 500)));
  }

  public function testsetupBox_canUseGivenBox() {
    $box = new Box();

    self::assertSame($box, $this->sut->setupBox(new Dimensions(), $box));
  }

  public function testsetupBox_canCreateNewBox_ifNoBoxIsGiven() {
    $desiredDimensions = new Dimensions(100, 200);
    $expectedBox = (new Box())->setDimensions($desiredDimensions);

    $box = $this->sut->setupBox($desiredDimensions);

    self::assertEquals($expectedBox, $box);
    self::assertNotSame($desiredDimensions, $box->getDimensions());
  }

  public function testalignBorder_toTopLeft_whenBoxIsOutOfBounds() {
    $box = $this->createBox(100, 100, 300, 100);

    $this->sut->alignBorder($box, $this->sut->calculateBorders($box, new Dimensions(500, 400)), new Dimensions(500, 400));

    self::assertEquals($this->createBox(0, 0, 500, 166), $box);
  }

  public function testalignBorder_toTopLeft() {
    $box = $this->createBox(100, 50, 300, 100);

    $this->sut->alignBorder($box, $this->sut->calculateBorders($box, new Dimensions(500, 400)), new Dimensions(500, 400));

    self::assertEquals($this->createBox(50, 0, 450, 150), $box);
  }

  public function testalignBorder_toTopRight_whenBoxIsOutOfBounds() {
    $box = $this->createBox(450, 100, 300, 100);

    $this->sut->alignBorder($box, $this->sut->calculateBorders($box, new Dimensions(500, 400)), new Dimensions(500, 400));

    self::assertEquals($this->createBox(350, 0, 150, 50), $box);
  }

  public function testalignBorder_toTopRight() {
    $box = $this->createBox(400, 50, 300, 100);

    $this->sut->alignBorder($box, $this->sut->calculateBorders($box, new Dimensions(500, 400)), new Dimensions(500, 400));

    self::assertEquals($this->createBox(350, 0, 150, 50), $box);
  }

  public function testalignBorder_toTopRight_whenBoxIsTopRight() {
    $box = $this->createBox(400, 300, 150, 50);

    $this->sut->alignBorder($box, $this->sut->calculateBorders($box, new Dimensions(500, 400)), new Dimensions(500, 400));

    self::assertEquals($this->createBox(300, 250, 200, 66), $box);
  }

  public function testalignBorder_toBottomRight() {
    $box = $this->createBox(400, 250, 50, 50);

    $this->sut->alignBorder($box, $this->sut->calculateBorders($box, new Dimensions(500, 300)), new Dimensions(500, 300));

    self::assertEquals($this->createBox(400, 200, 100, 100), $box);
  }

  public function testalignBorder_toBottomLeft() {
    $box = $this->createBox(50, 250, 50, 50);

    $this->sut->alignBorder($box, $this->sut->calculateBorders($box, new Dimensions(500, 300)), new Dimensions(500, 300));

    self::assertEquals($this->createBox(0, 200, 100, 100), $box);
  }

  public function testalignBorder_toBottomLeft_whenBottomIsClosest() {
    $box = $this->createBox(150, 250, 50, 50);

    $this->sut->alignBorder($box, $this->sut->calculateBorders($box, new Dimensions(600, 350)), new Dimensions(600, 350));

    self::assertEquals($this->createBox(100, 250, 100, 100), $box);
  }

  public function testalignBorder_toBottomLeft_whenBoxIsOutOfBounds() {
    $box = $this->createBox(550, 200, 100, 800);

    $this->sut->alignBorder($box, $this->sut->calculateBorders($box, new Dimensions(600, 800)), new Dimensions(400, 800));

    self::assertEquals($this->createBox(250, 150, 81, 650), $box);
  }

  public function testrecenterOnFocalPoint_canMoveTopLeftCornerToTheRight_whenNeededOffsetXIsPositive_AndBiggerThanBorder() {
    $box = $this->createBox(100, 100, 400, 400);

    $this->sut->recenterOnFocalPoint($box, new Point(500, 500), $this->createBorders(0, 1000, 0, 0));

    self::assertEquals($this->createBox(300, 100, 400, 400), $box);
  }

  public function testrecenterOnFocalPoint_canMoveTopLeftCornerToTheRight_whenNeededOffsetXIsPositive_AndSmallerThanBorder() {
    $box = $this->createBox(100, 100, 400, 400);

    $this->sut->recenterOnFocalPoint($box, new Point(500, 500), $this->createBorders(0, 50, 0, 0));

    self::assertEquals($this->createBox(150, 100, 400, 400), $box);
  }

  public function testrecenterOnFocalPoint_canMoveTopLeftCornerToTheLeft_whenNeededOffsetXIsNegative_AndBiggerThanBorder() {
    $box = $this->createBox(500, 100, 400, 400);

    $this->sut->recenterOnFocalPoint($box, new Point(500, 500), $this->createBorders(0, 0, 0, 1000));

    self::assertEquals($this->createBox(300, 100, 400, 400), $box);
  }

  public function testrecenterOnFocalPoint_canMoveTopLeftCornerToTheLeft_whenNeededOffsetXIsNegative_AndSmallerThanBorder() {
    $box = $this->createBox(500, 100, 400, 400);

    $this->sut->recenterOnFocalPoint($box, new Point(500, 500), $this->createBorders(0, 0, 0, 50));

    self::assertEquals($this->createBox(450, 100, 400, 400), $box);
  }

  public function testrecenterOnFocalPoint_canMoveTopLeftCornerDown_whenNeededOffsetYIsPositive_AndBiggerThanBorder() {
    $box = $this->createBox(100, 100, 400, 400);

    $this->sut->recenterOnFocalPoint($box, new Point(500, 500), $this->createBorders(0, 0, 1000, 0));

    self::assertEquals($this->createBox(100, 300, 400, 400), $box);
  }

  public function testrecenterOnFocalPoint_canMoveTopLeftCornerDown_whenNeededOffsetYIsPositive_AndSmallerThanBorder() {
    $box = $this->createBox(100, 100, 400, 400);

    $this->sut->recenterOnFocalPoint($box, new Point(500, 500), $this->createBorders(0, 0, 50, 0));

    self::assertEquals($this->createBox(100, 150, 400, 400), $box);
  }

  public function testrecenterOnFocalPoint_canMoveTopLeftCornerUp_whenNeededOffsetYIsNegative_AndBiggerThanBorder() {
    $box = $this->createBox(500, 500, 400, 400);

    $this->sut->recenterOnFocalPoint($box, new Point(500, 500), $this->createBorders(1000, 0, 0, 0));

    self::assertEquals($this->createBox(500, 300, 400, 400), $box);
  }

  public function testrecenterOnFocalPoint_canMoveTopLeftCornerUp_whenNeededOffsetYIsNegative_AndSmallerThanBorder() {
    $box = $this->createBox(500, 500, 400, 400);

    $this->sut->recenterOnFocalPoint($box, new Point(500, 500), $this->createBorders(50, 0, 0, 0));

    self::assertEquals($this->createBox(500, 450, 400, 400), $box);
  }

  public function testcalculateBorders() {
    self::assertEquals($this->createBorders(200, 500, 300, 100), $this->sut->calculateBorders($this->createBox(100, 200, 400, 500), new Dimensions(1000, 1000)));
  }

  public function testcalculateBorders_canUnsignNegativeValues() {
    self::assertEquals($this->createBorders(5000, 9000, 9000, 5000), $this->sut->calculateBorders($this->createBox(5000, 5000, 5000, 5000), new Dimensions(1000, 1000)));
  }

  public function testcalculateBorders_canFilter0Values() {
    self::assertEquals([], $this->sut->calculateBorders($this->createBox(0, 0, 100, 100), new Dimensions(100, 100)));
  }

  public function testcalculateBorders_wontFilter0Values_ifFilterZeroBorders_isSetToFalse() {
    self::assertEquals($this->createBorders(0, 0, 0, 0), $this->sut->calculateBorders($this->createBox(0, 0, 100, 100), new Dimensions(100, 100), false));
  }

  private function createBox($x, $y, $width, $height) {
    $box = new Box();
    $box->getTopLeftCorner()->setX($x)->setY($y);
    $box->getDimensions()->setWidth($width)->setHeight($height);
    return $box;
  }

  private function createBorders($top, $right, $down, $left) {
    return [
      \de\imxnet\imxplatformphp\image\editor\croppingStrategy\ZoomOnFocalPoint::BORDER_TOP => $top,
      \de\imxnet\imxplatformphp\image\editor\croppingStrategy\ZoomOnFocalPoint::BORDER_RIGHT => $right,
      \de\imxnet\imxplatformphp\image\editor\croppingStrategy\ZoomOnFocalPoint::BORDER_BOTTOM => $down,
      \de\imxnet\imxplatformphp\image\editor\croppingStrategy\ZoomOnFocalPoint::BORDER_LEFT => $left,
    ];
  }
}
